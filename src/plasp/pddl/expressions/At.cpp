#include <plasp/pddl/expressions/At.h>

#include <plasp/utils/TranslatorException.h>

namespace plasp
{
namespace pddl
{
namespace expressions
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// At
//
////////////////////////////////////////////////////////////////////////////////////////////////////

At::At()
:	m_argument{nullptr}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void At::setArgument(ExpressionPointer argument)
{
	m_argument = argument;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer At::argument() const
{
	return m_argument;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer At::reduced()
{
	throw utils::TranslatorException("reducing “at” predicates currently not supported");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer At::negationNormalized()
{
	BOOST_ASSERT(m_argument);

	m_argument = m_argument->negationNormalized();

	return this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer At::prenex()
{
	BOOST_ASSERT(m_argument);

	return Expression::prenex(this, m_argument);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer At::simplified()
{
	BOOST_ASSERT(m_argument);

	m_argument = m_argument->simplified();

	return this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void At::print(std::ostream &ostream) const
{
	ostream << "(at " << m_timePoint << " ";

	m_argument->print(ostream);

	ostream << ")";
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
