#include <plasp/pddl/expressions/Not.h>

namespace plasp
{
namespace pddl
{
namespace expressions
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Not
//
////////////////////////////////////////////////////////////////////////////////////////////////////

Not::Not()
:	m_argument{nullptr}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Not::setArgument(ExpressionPointer argument)
{
	m_argument = argument;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer Not::argument() const
{
	return m_argument;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer Not::normalized()
{
	BOOST_ASSERT(m_argument);

	// Remove double negations immediately
	if (m_argument->expressionType() == Expression::Type::Not)
	{
		auto &argument = dynamic_cast<Not &>(*m_argument);

		return argument.m_argument->normalized();
	}

	m_argument = m_argument->normalized();

	return this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
