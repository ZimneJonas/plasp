#include <plasp/pddl/expressions/ForAll.h>

#include <algorithm>
#include <iostream>

#include <plasp/pddl/expressions/DerivedPredicate.h>

namespace plasp
{
namespace pddl
{
namespace expressions
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ForAll
//
////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string ForAll::Identifier = "forall";

////////////////////////////////////////////////////////////////////////////////////////////////////

ExpressionPointer ForAll::decomposed(DerivedPredicates &derivedPredicates)
{
	auto derivedPredicate = DerivedPredicatePointer(new DerivedPredicate(derivedPredicates.size()));
	derivedPredicates.push_back(derivedPredicate);

	derivedPredicate->setArgument(this);

	return derivedPredicate;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
