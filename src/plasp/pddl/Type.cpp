#include <plasp/pddl/Type.h>

namespace plasp
{
namespace pddl
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Type
//
////////////////////////////////////////////////////////////////////////////////////////////////////

Type::Type(std::string name)
:	m_isDirty{false},
	m_name{name}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Type::setDirty(bool isDirty)
{
	m_isDirty = isDirty;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool Type::isDirty() const
{
	return m_isDirty;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const std::string &Type::name() const
{
	return m_name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Type::addParentType(const Type &parentType)
{
	m_parentTypes.emplace_back(&parentType);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const std::vector<const Type *> &Type::parentTypes() const
{
	return m_parentTypes;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
